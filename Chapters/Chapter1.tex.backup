% Chapter 1

\chapter{Introducción} % Main chapter title

\label{Chapter1} % For referencing the chapter elsewhere, use \ref{Chapter1} 

\lhead{Capítulo 1. \emph{Introducción}} % This is for the header on each page - perhaps a shortened title

%----------------------------------------------------------------------------------------

En los últimos años, las tarjetas de desarrollo destinadas a los dispositivos \textit{wearables} ~\cite{7004894} están ganando popularidad entre los 
desarrolladores. Nuevas aplicaciones para estos sistemas embebidos están siendo desarrolladas como realidad aumentada, reconocimiento de
rostros, procesamiento de lenguaje natural, vídeo juegos, software de modelado en 3D, entre otros. Dichas aplicaciones usualmente son 
ávidas de recursos, requiriendo un cálculo de cómputo intensivo y un alto consumo de energía. Por otro lado, los dispositivos móviles, debido
a su naturaleza portátil son limitados de recursos en términos de poder computacional y duración de batería~\cite{6157576}. 

A pesar del notorio avance tecnológico en términos de hardware en Computación Móvil, la densidad de energía en baterías ha sido relegada y ha tenido una 
tendencia menor en comparación con los componentes restantes~\cite{1401839}, consecuentemente la calidad de la experiencia de usuario es
reducida. De acuerdo al estudio titulado ``2012 Satisfacción de los Clientes de Smartphones en Estados Unidos''\footnote{\tiny \url{http://www.jdpower.com/press-releases/2012-us-wireless-smartphone-and-traditional-mobile-phone-satisfaction-studies-volume}, último acceso en setiembre 2015}, la duración de la batería es 
es el aspecto menos satisfactorio en los smartphones, calificado con un valor de 6.7 sobre 10. Por lo tanto, la ejecución fluida de estas tareas
costosas en tales dispositivos limitados es un reto abierto~\cite{sanaei2014heterogeneity}.

Inicialmente la Computación en nube para móviles (MCC, Mobile Cloud Computing)~\cite{Rahimi2014} fue propuesto como una opción prometedora para solucionar tal 
reto, proponiendo mecanismos de \textit{offloading} para aplicaciones a fin de aliviar la sobrecarga de los recursos limitados en los sistemas
embebidos. Esta meta es satisfecha integrando los recursos en nube en el entorno móvil de manera bajo demanda y elástica. En tal integración, 
las tareas intensivas son enviadas a servidores de cómputo de alto rendimiento en la nube, por lo que, MCC podría reducir el tiempo de respuesta 
de un algoritmo y ahorrar energía reduciendo procesamiento local.

Sin embargo, en entornos reales MCC presenta una cuestión crucial para ser resuelta: la elevada latencia en las Redes de Área Amplia (WAN, 
Wide Area Network)~\cite{5280678}. Considérese el escenario donde se tenga uno de los más potentes computadores en la nube, pero supongamos que
desafortunadamente el ocasional proveedor de servicio (ISP, Internet Service Provider) no puede establecer una conectividad sin problemas en el área. Es altamente
probable que tal limitación implicará una pérdida de paquetes, haciendo que la experiencia del usuario se vea degradada. 

Con el objetivo de solucionar dicho inconveniente, los \textit{cloudlets}~\cite{7026272} fueron propuestos como una  nube más próxima
al 
usuario final. Tal proximidad se logra desplegando dicho \textit{cloudlet} en la Red de Área Local Inalámbrica (WLAN, Wireless Local Area Network),
de tal forma que los \textit{cloudlets} asisten a los dispositivos limitados en la red local actual con mecanismos de \textit{offloading} sin ser
perjudicados por la alta latencia en entornos WAN. La arquitectura \textit{cloudlet} fue modelada por Satyanarayanan {\em et. al.}~\cite{5280678},
donde tres principales características son resaltadas:

\begin{itemize}
 \item \textbf{Estado flexible:} Es uno de los atributos más importantes. Una vez que el \textit{cloudlet} es instalado, es enteramente
 auto-administrado y requiere poca o ninguna asistencia profesional. 
 \item \textbf{Potente y con buena conexión a Internet:} Es una computadora rica en recursos o un cluster de computadoras disponible para ser
 usada por dispositivos cercanos. Similarmente, los \textit{cloudlets} tienen una eficiente y confiable conexión a Internet, usualmente a través
 conexión cableada.
 \item \textbf{Disponible para ser usado por dispositivos móviles cercanos:} Está logicamente cerca a los dispositivos, esto significa que 
 cualquier dispositivo móvil ligado a la red WAN tiene una baja latencia con el \textit{cloudlet} y un elevado ancho de banda disponible para 
 transferir gran cantidad de datos. 
\end{itemize}

El \textit{offloading} de computación es una técnica que potencia las capacidades de los sistemas móviles (p. ej. wearables, teléfonos móviles,
sensores, internet de las cosas, entre otros dispositivos portátiles). Dicha mejora es realizada migrando el programa entero o solo sus cálculos intensivos a 
computadoras más potentes ubicadas en la nube o en los \textit{cloudlets} (infraestructura próxima). En contraste con la arquitectura 
cliente-servidor, la mayoría de los frameworks para \textit{offloading} efectúan una decisión inteligente acerca de qué enviar y cómo migrar 
tareas. Esta decisión es ejecutada por algoritmo en segundo plano que considera algunas variables al contexto móvil: (1) disponibilidad del 
servidor, (2) ancho de banda de la red inalámbrica, (3) tamaño de datos enviados a través de la red (4) energía gastada por el proceso (en 
estado ocioso y en estado de ejecución), (5) velocidad de procesamiento en el servidor, (6) velocidad de procesamiento en el móvil, entre otros
factores subyacentes a la heterogeneidad de MCC~\cite{sanaei2014heterogeneity}. 

Con el fin de tomar ventaja del auge de las placas de desarrollo disponibles en el mercado ~\cite{7004894} (Intel Edison Board 
\footnote{\url{http://www.intel.com/content/www/us/en/do-it-yourself/edison.html}, último acceso en setiembre 2015}, Raspberry Pi 
\footnote{ \url{https://www.raspberrypi.org/}, último acceso en setiembre 2015},
Intel Galileo \footnote{\url{http://www.intel.com/content/www/us/en/embedded/products/galileo/galileo-overview.html}, 
último acceso en setiembre 2015 }, entre otros), y aprovechando que tales plataformas
soportan distribuciones ligeras de Linux, se propone el sistema Pytos, un 
framework basado en Python que permite migrar tareas intensivas desde el dispositivo móvil hacia la infraestructura 
\textit{cloudlet}. El mencionado procedimiento podrá ser realizado con facilidad para el programador, además que el proceso de descubrimiento de 
\textit{cloudlets} será transparente al usuario final.

\begin{comment}
%En los años recientes se ha visto el creciente auge en el uso de los dispositivos móviles (entre smartphones y dispositivos de 
%internet de las cosas) y su dependencia hacia ellos en la vida cotidiana. Se calcula que actualmente en las principales tiendas virtuales
%de aplicaciones como  Amazon App store ~\footnote{Amazon App Store: \url{http://www.amazon.com/mobile-apps/b?node=2350149011} }, 
%Google Play Store ~\footnote{Google Play Store: \url{https://play.google.com/store}},
%y AppStore \footnote{AppStore: \url{https://itunes.apple.com/us/genre/ios/id36}} existen aproximadamente 3 millones de aplicaciones en conjunto ~\cite{AppAnie}.
Hoy en día el entorno móvil tiene más relevancia que antes en los usuarios. Esta cambio se debe principalmente debido a los siguientes factores:
mejora de las capacidades de hardware por la alta competitividad entre fabricantes, mejores aplicaciones que demandan más poder computacional, y la 
tendencia a  integrar objetos a internet (IoT).

%\textit{Heavy Reading} estima que 
%en el año 2017 las ganancias alcanzarán una cifra de \$ 68 billones ~\cite{heavyReading}, y ABI research predice que para finales del año 
%2014 habrán 998 millones usuarios, de los 42.8 millones que habían en el año 2008 de la computación 
%en nube para móviles (usuarios y proveedores de servicios en nube) en todo el mundo, generando un total de \$ 5 billones en ganancias.

Cada año, los diferentes fabricantes producen dispositivos 
de menor tamaño y mejoran sus características de procesamiento y de almacenamiento, se integran nuevos sensores, permitiendo que las 
compañías de Sistemas 
Operativos como Android ~\footnote{Android :\url{http://developer.android.com/index.html} } y Apple 
~\footnote{iPhone: \url{https://developer.apple.com/devcenter/ios/index.action}}, empresas de software y desarrolladores independientes tengan una 
valla más alta para desarrollar aplicaciones, relegando a los dispositivos limitados de recursos con una pésima calidad 
de servicio (QoS, por sus siglas en inglés) a sus usuarios como la demora en el tiempo de respuesta, espacio de almacenamiento,
el uso excesivo de recursos en energía, entre otros. 

La Computación en Nube para móviles (MCC, por sus siglas en inglés) tiene como objetivo superar estas limitaciones y aumentar las capacidades 
de cualquier dispositivo móvil, uniendo la computación
en la nube y la computación móvil, aprovechando la abundancia y el poder de los recursos computacionales en nube de una manera elástica y 
bajo demanda. La explotación de la riqueza de los servicios en nube es ortogonal y aplicable en varias ramas de la computación 
donde se requiere un procesamiento pesado como es el caso de reconocimiento y procesamiento de imágenes y videos, video juegos, procesamiento digital de señales, inteligencia artificial, 
aprendizaje máquina, etc.

Esto nos dirige a no estar abarrotando el dispositivo móvil con todos los procesos, sino hacer \textit{offloading} de ciertas partes de la 
aplicación siguiendo el paradigma de cliente-servidor, un tomador de decisión decide que parte se ejecutará localmente y que parte de manera 
remota considerando varios parámetros como: ancho de bando de la red inalámbrica, datos a intercambiar, cantidad de procesamiento necesitado para 
completar la tarea, la velocidad del servicio en nube, la velocidad del dispositivo móvil, entre otros. Existen esfuerzos para dar solución 
a este problema, donde podemos nombrar algunos como: MAUI \cite{Cuervo:2010:MMS:1814433.1814441}, CloneCloud \cite{chun2011clonecloud}
and Cuckoo \cite{kemp2012cuckoo}
que mitigaron la limitación de recursos de diferentes formas con resultados muy motivadores.

Existen retos y desafíos en esta área naciente de la MCC, debido al crecimiento competitivo de los compañías proveedoras,
se generó Heterogeneidad entre dispositivos móviles, computación en nube y redes inalámbricas, impidiendo la interoperabilidad y portabilidad,
principalmente.

\end{comment}

\section{Motivación}

La experiencia del usuario al utilizar una aplicación es un aspecto fundamental, que en muchos casos determina su aceptación o rechazo 
por los usuarios. Especialmente en aplicaciones que requieren fluidez para una interacción en tiempo real, como: realidad aumentada,
procesamiento de imágenes, vídeo streaming, etc. Por lo que una eventual mejora de dicha característica en términos de rendimiento y/o 
reducción del consumo de energía usando la infraestructura de \textit{cloudlets}, generaría una mayor satisfacción del usuario con la 
aplicación móvil. Adicionalmente, la investigación se vuelve más desafiante considerando la heterogeneidad inherente 
a la computación en nube para móviles.

\section{Objetivos}

Los objetivos del siguiente trabajo son los siguientes: 

\begin{itemize}
 \item \textit{Estudio de los diferentes mecanismos de \textit{offloading}}, se realizará un estudio y comparación de las diferentes técnicas 
 y \textit{frameworks} disponibles actualmente que permitan el \textit{offloading} de tareas. 
 Se mostrará un análisis comparativo de las arquitecturas, objetivo principal, tipo de \textit{offloading}, plataformas de despliegue y el 
 campo de aplicación donde fueron probados.
 \item \textit{Validación de la prueba del concepto}, con el fin de verificar la supremacía de los entornos WLAN sobre los entornos 
 WAN en el offloading de tareas, se realizará un estudio empírico comparativo entre tales contextos. Estos experimentos se efectuarán usando
 una aplicación práctica de reconocimiento de rostros, empleando métricas de tiempo de respuesta y consumo de energía.  
 
 \item \textit{Propuesta de la Arquitectura de Pytos}, se propondrá una arquitectura, que permita la migración 
 de código al borde de la red (\textit{cloudlets}). Pytos proveerá mecanismos de \textit{offloading} transparentes al usuario final, y a los 
 desarrolladores, Pytos aprovisionará un modelo de programación a una granularidad a nivel de métodos. 
 
% \item Proponer un modelo de visión máquina a futuro, 
% \item Geometría Computacional para la determinación de las distancias.
\end{itemize}

\section{Trabajos Relacionados}
\label{sec:relatedWork}

En el año 1983, Powell y Miller ~\cite{Powell:CSD-83-132} introdujeron el aprovechamiento recursos computacionales disponibles en una red, 
su enfoque fue migrar procesos durante el tiempo de ejecución. Sin embargo, no fue hasta el advenimiento del boom de la computación móvil en
el año 2001, el cual llevó este concepto a ser profundamente estudiado nuevamente. Satyanarayanan {\em et. al.}~\cite{943998} modeló
el concepto a \textit{cyber-foraging} o también conocido como \textit{offloading}, el aumento dinámico de los recursos computacionales 
de una computadora móvil inalámbrica explotando la infraestructura de hardware fija anexa a dicha red. Con lo cual, la computación viene a ser
más copiosa, acrecentando la experiencia de usuario.  


%added

Similarmente a la definición de \emph{cloudlet}, el término \emph{fog computing} o computación en la niebla 
\cite{Bonomi:2012:FCR:2342509.2342513} traslapa la idea de procesar al borde de la red. No obstante, la principal diferencia entre 
los mencionados conceptos es que mientras la computación en la niebla potencia los dispositivos móviles usando componentes de red 
directamente (enrutadores 
de red, hubs, etc), los componentes \emph{cloudlet} son computadoras tradicionales que pueden ser vistas como servidores de la nube 
ubicados próximos al usuario. 

Hoy en día existe una variedad de frameworks para realizar \emph{offloading}, los cuales entregan aplicaciones móviles intensas
computacionalmente de forma parcial o enteramente a centros de datos en la nube, o a computadores más potentes en la red de área local
(analizados a más detalle en el Capítulo~\ref{ch:Chapter3}). Por ejemplo, MAUI~\cite{Cuervo:2010:MMS:1814433.1814441}, un framework de 
\emph{offloading} basado en la nube, diseñado solo para soportar aplicaciones escritas en el lenguaje de programación .NET de Microsoft, realiza la tarea de 
migración a nivel de métodos, requiriendo que el desarrollador anote las funciones que pueden ser migradas. El motor de decisión de MAUI 
decide en tiempo de ejecución la opción más adecuada considerando la optimización de energía.

Asimismo, Cuckoo~\cite{kemp2012cuckoo} es un framework que puede descargar tareas costosas en ambos entornos (definidos a priori): en la nube y en 
\emph{cloudlets}. Dicho sistema está enfocado a plataformas Android y permite una granularidad de migración a nivel de métodos.
Los métodos a migrar son declarados en un archivo de Lenguaje de Definición de Interfaces (AIDL, Android Interfaces Definition Language). 
Para resolver el tema de comunicación con los componentes nativos de Android, Cuckoo usa el modelo por defecto \textit{stub/proxy} con 
el fin de separar las actividades (interfaz de usuario) de los servicios. En otro ejemplo, CloneCloud~\cite{chun2011clonecloud} transforma 
automáticamente (sin algún esfuerzo de programación) aplicaciones móviles de ejecución única, en aplicaciones distribuidas optimizadas, 
migrando secciones costosas a la nube. Este objetivo es alcanzado configurando una máquina virtual de Java (JVM) en el lado del servidor que 
ejecuta un clon de la aplicación móvil. En el caso del sistema COSMO, sus esfuerzos se enfocan en reducir el costo monetario que provoca 
el uso intensivo de los recursos en nube mientras que al mismo tiempo mejora el rendimiento. 

%Los sistemas actuales de \emph{offloading} se enfocan en maximizar una o mas características de las capacidades del dispositivo móvil: 
%i) tiempo de ejecución, ii) ahorro de energía y iii) costo operacional. 

El \emph{offloading} basado en \emph{cloudlets} tiene como propósito reducir la alta latencia WAN que presenta la Computación en Nube para Móviles.
Satyanarayanan et al. \cite{5280678} propusieron el concepto novel de adaptar los modelos de \emph{offloading} vigentes a una arquitectura 
\emph{cloudlet}, de tal forma que los usuarios móviles se beneficien de tal infraestructura próxima con demoras significativamente menores.
Satyanarayanan et al. \cite{7026272} en una investigación posterior, valida la arquitectura \emph{cloudlet}, utilizando un dispositivo 
\emph{google glass} \footnote{\url{https://www.google.com/glass/start/}, Último acceso en setiembre 2015}
para aumentar la capacidad cognitiva de resolver problemas en tiempo real mediante \emph{streaming} de vídeo. Igualmente, Fesehaye et al. \cite{6337243}
estudió el impacto de los \emph{cloudlets} en aplicaciones de nube interactivas. Sus resultados demostraron que los \emph{cloudlet} superan
la nube en términos de reducir la demora e incrementar el rendimiento. Soyata et al. \cite{6249269} propuso la arquitectura MOCHA, en la cual 
el componente \emph{cloudlet} determina como particionar el cálculo entre si mismo y múltiples servidores de la nube sobre los diferentes 
enlaces/rutas con el objetivo de mejorar la calidad de servicio (QoS, Quality of Service). 

Un ejemplo de framework de \emph{offloading} basados exclusivamente en componentes \emph{cloudlets} es el caso de Scavenger~\cite{5466972}. 
Scavenger es un sistema que emplea la migración de tareas mediante anotaciones de métodos en el lenguaje Python (de manera similar a Cuckoo y 
MAUI). Este software usa el enfoque de código móvil para particionar y distribuir tareas. El principal aporte de Scavenger es un recolector doble 
de datos relevantes al contexto móvil. Sin embargo, 



 another framework that employs
cyber-foraging using WiFi for connectivity, and uses a mobile
code approach to partition and distribute jobs. It also introduces
a scheduler for cost assessment. Its method of cost assessment
is based on the speed of the surrogate server and it uses a
benchmarkingmethodtodothis.Usingitsframework,itispossible
for a mobile device to offload to one or more surrogates and its
tests show that running the application on multiple surrogates in
parallel is more efficient in terms of performance



Many applications may be improved by offloading: complex mathematical operations~\cite{shivarudrappa2011cofa}, signal processing
 on real time gaming~\cite{Cuervo:2010:MMS:1814433.1814441}~\cite{kemp2012cuckoo}, securing mobile devices through virus analysis~\cite{DBLP:journals/corr/abs-1105-3232}, augmented cognition~\cite{7026272}, among others high-intensive tasks.
 
This paper explores some above-mentioned offloading techniques in a cloudlet environment, as a middle-tier component between the cloud and
the client device. Our work uses Linux-based development boards as
resources-limited clients in easy way integration.

\section{Organización del Documento}
Este trabajo está organizado como sigue: En el Capítulo \ref{Chapter2} damos una vista general a los conceptos fundamentales requeridos para 
entender MCC, como computación móvil y 
computación en nube. En el Capítulo \ref{Chapter3} describimos los conceptos de MCC y su heterogeneidad subyacente. Estudiaremos las 
principales técnicas de \textit{offloading} usadas en MCC en el Capítulo \ref{ch:Chapter4}. En el Capítulo~\ref{ch:Chapter5} introducimos 
el concepto de \textit{cloudlet}, componente necesario para construir la arquitectura propuesta y reducir la demora en redes WAN.
Finalmente en el Capítulo~\ref{ch:Chapter6} haremos una propuesta de arquitectura llamado Pytos, framework basado en Python para implementar 
\textit{offloading} hacia \textit{cloudlets} en aplicaciones móviles.
\begin{comment}

\subsection{A (not so short) Introduction to \LaTeX{}}

 
If you are new to \LaTeX{}, there is a very good eBook -- freely available online as a PDF file -- called, ``The Not So Short Introduction to \LaTeX{}''. The book's title is typically shortened to just ``lshort''. You can download the latest version (as it is occasionally updated) from here:\\
\href{http://www.ctan.org/tex-archive/info/lshort/english/lshort.pdf}{\texttt{http://www.ctan.org/tex-archive/info/lshort/english/lshort.pdf}}

It is also available in several other languages. Find yours from the list on this page:\\
\href{http://www.ctan.org/tex-archive/info/lshort/}{\texttt{http://www.ctan.org/tex-archive/info/lshort/}}

It is recommended to take a little time out to learn how to use \LaTeX{} by creating several, small `test' documents. Making the effort now means you're not stuck learning the system when what you \emph{really} need to be doing is writing your thesis.

\subsection{A Short Math Guide for \LaTeX{}}

If you are writing a technical or mathematical thesis, then you may want to read the document by the AMS (American Mathematical Society) called, ``A Short Math Guide for \LaTeX{}''. It can be found online here:\\
\href{http://www.ams.org/tex/amslatex.html}{\texttt{http://www.ams.org/tex/amslatex.html}}\\
under the ``Additional Documentation'' section towards the bottom of the page.

\subsection{Common \LaTeX{} Math Symbols}
There are a multitude of mathematical symbols available for \LaTeX{} and it would take a great effort to learn the commands for them all. The most common ones you are likely to use are shown on this page:\\
\href{http://www.sunilpatel.co.uk/latexsymbols.html}{\texttt{http://www.sunilpatel.co.uk/latexsymbols.html}}

You can use this page as a reference or crib sheet, the symbols are rendered as large, high quality images so you can quickly find the \LaTeX{} command for the symbol you need.

\subsection{\LaTeX{} on a Mac}
 
The \LaTeX{} package is available for many systems including Windows, Linux and Mac OS X. The package for OS X is called MacTeX and it contains all the applications you need -- bundled together and pre-customised -- for a fully working \LaTeX{} environment and workflow.
 
MacTeX includes a dedicated \LaTeX{} IDE (Integrated Development Environment) called ``TeXShop'' for writing your `\texttt{.tex}' files and ``BibDesk'': a program to manage your references and create your bibliography section just as easily as managing songs and creating playlists in iTunes.

%----------------------------------------------------------------------------------------

\section{Getting Started with this Template}

If you are familiar with \LaTeX{}, then you can familiarise yourself with the contents of the Zip file and the directory structure and then place your own information into the `\texttt{Thesis.cls}' file. Section \ref{FillingFile} on page \pageref{FillingFile} tells you how to do this. Make sure you read section \ref{ThesisConventions} about thesis conventions to get the most out of this template and then get started with the `\texttt{Thesis.tex}' file straightaway.

If you are new to \LaTeX{} it is recommended that you carry on reading through the rest of the information in this document.

\subsection{About this Template}

This \LaTeX{} Thesis Template is originally based and created around a \LaTeX{} style file created by Steve R.\ Gunn from the University of Southampton (UK), department of Electronics and Computer Science. You can find his original thesis style file at his site, here:\\
\href{http://www.ecs.soton.ac.uk/~srg/softwaretools/document/templates/}{\texttt{http://www.ecs.soton.ac.uk/$\sim$srg/softwaretools/document/templates/}}

My thesis originally used the `\texttt{ecsthesis.cls}' from his list of styles. However, I knew \LaTeX{} could still format better. To get the look I wanted, I modified his style and also created a skeleton framework and folder structure to place the thesis files in.

This Thesis Template consists of that modified style, the framework and the folder structure. All the work that has gone into the preparation and groundwork means that all you have to bother about is the writing.

Before you begin using this template you should ensure that its style complies with the thesis style guidelines imposed by your institution. In most cases this template style and layout will be suitable. If it is not, it may only require a small change to bring the template in line with your institution's recommendations.

%----------------------------------------------------------------------------------------

\section{What this Template Includes}

\subsection{Folders}

This template comes as a single Zip file that expands out to many files and folders. The folder names are mostly self-explanatory:

\textbf{Appendices} -- this is the folder where you put the appendices. Each appendix should go into its own separate `\texttt{.tex}' file. A template is included in the directory.

\textbf{Chapters} -- this is the folder where you put the thesis chapters. A thesis usually has about seven chapters, though there is no hard rule on this. Each chapter should go in its own separate `\texttt{.tex}' file and they usually are split as:
\begin{itemize}
\item Chapter 1: Introduction to the thesis topic
\item Chapter 2: Background information and theory
\item Chapter 3: (Laboratory) experimental setup
\item Chapter 4: Details of experiment 1
\item Chapter 5: Details of experiment 2
\item Chapter 6: Discussion of the experimental results
\item Chapter 7: Conclusion and future directions
\end{itemize}
This chapter layout is specialised for the experimental sciences.

\textbf{Figures} -- this folder contains all figures for the thesis. These are the final images that will go into the thesis document.

\textbf{Primitives} -- this is the folder that contains scraps, particularly because one final image in the `Figures' folder may be made from many separate images and photos, these source images go here. This keeps the intermediate files separate from the final thesis figures.

\subsection{Files}

Included are also several files, most of them are plain text and you can see their contents in a text editor. Luckily, many of them are auxiliary files created by \LaTeX{} or BibTeX and which you don't need to bother about:

\textbf{Bibliography.bib} -- this is an important file that contains all the bibliographic information and references that you will be citing in the thesis for use with BibTeX. You can write it manually, but there are reference manager programs available that will create and manage it for you. Bibliographies in \LaTeX{} are a large subject and you may need to read about BibTeX before starting with this.

\textbf{Thesis.cls} -- this is an important file. It is the style file that tells \LaTeX{} how to format the thesis. You will also need to open this file in a text editor and fill in your own information (such as name, department, institution). Luckily, this is not too difficult and is explained in section \ref{FillingFile} on page \pageref{FillingFile}.

\textbf{Thesis.pdf} -- this is your beautifully typeset thesis (in the PDF file format) created by \LaTeX{}.

\textbf{Thesis.tex} -- this is an important file. This is the file that you tell \LaTeX{} to compile to produce your thesis as a PDF file. It contains the framework and constructs that tell \LaTeX{} how to layout the thesis. It is heavily commented so you can read exactly what each line of code does and why it is there. After you put your own information into the `\texttt{Thesis.cls}' file, go to this file and begin filling it in -- you have now started your thesis!

\textbf{vector.sty} -- this is a \LaTeX{} package, it tells \LaTeX{} how to typeset mathematical vectors. Using this package is very easy and you can read the documentation on the site (you just need to look at the `\texttt{vector.pdf}' file):\\
\href{http://www.ctan.org/tex-archive/macros/latex/contrib/vector/}{\texttt{http://www.ctan.org/tex-archive/macros/latex/contrib/vector/}}

\textbf{lstpatch.sty} -- this is a \LaTeX{} package required by this LaTeX template and is included as not all \TeX{} distributions have it installed by default. You do not need to modify this file.

Files that are \emph{not} included, but are created by \LaTeX{} as auxiliary files include:

\textbf{Thesis.aux} -- this is an auxiliary file generated by \LaTeX{}, if it is deleted \LaTeX{} simply regenerates it when you run the main `\texttt{.tex}' file.

\textbf{Thesis.bbl} -- this is an auxiliary file generated by BibTeX, if it is deleted, BibTeX simply regenerates it when you run the main tex file. Whereas the `\texttt{.bib}' file contains all the references you have, this `\texttt{.bbl}' file contains the references you have actually cited in the thesis and is used to build the bibliography section of the thesis.

\textbf{Thesis.blg} -- this is an auxiliary file generated by BibTeX, if it is deleted BibTeX simply regenerates it when you run the main `\texttt{.tex}' file.

\textbf{Thesis.lof} -- this is an auxiliary file generated by \LaTeX{}, if it is deleted \LaTeX{} simply regenerates it when you run the main `\texttt{.tex}' file. It tells \LaTeX{} how to build the `List of Figures' section.

\textbf{Thesis.log} -- this is an auxiliary file generated by \LaTeX{}, if it is deleted \LaTeX{} simply regenerates it when you run the main `\texttt{.tex}' file. It contains messages from \LaTeX{}, if you receive errors and warnings from \LaTeX{}, they will be in this `\texttt{.log}' file.

\textbf{Thesis.lot} -- this is an auxiliary file generated by \LaTeX{}, if it is deleted \LaTeX{} simply regenerates it when you run the main `\texttt{.tex}' file. It tells \LaTeX{} how to build the `List of Tables' section.

\textbf{Thesis.out} -- this is an auxiliary file generated by \LaTeX{}, if it is deleted \LaTeX{} simply regenerates it when you run the main `\texttt{.tex}' file.


So from this long list, only the files with the `\texttt{.sty}', `\texttt{.bib}', `\texttt{.cls}' and `\texttt{.tex}' extensions are the most important ones. The other auxiliary files can be ignored or deleted as \LaTeX{} and BibTeX will regenerate them.

%----------------------------------------------------------------------------------------

\section{Filling in the `\texttt{Thesis.cls}' File}\label{FillingFile}

You will need to personalise the thesis template and make it your own by filling in your own information. This is done by editing the `\texttt{Thesis.cls}' file in a text editor.

Open the file and scroll down, past all the `$\backslash$\texttt{newcommand}\ldots' items until you see the entries for `\texttt{University Name}', `\texttt{Department Name}', etc\ldots.

Fill out the information about your group and institution and ensure you keep to block capitals where it asks you to. You can also insert web links, if you do, make sure you use the full URL, including the `\texttt{http://}' for this.

The last item you should need to fill in is the Faculty Name (in block capitals). When you have done this, save the file and recompile `\texttt{Thesis.tex}'. All the information you filled in should now be in the PDF, complete with web links. You can now begin your thesis proper!

%----------------------------------------------------------------------------------------

\section{The `\texttt{Thesis.tex}' File Explained}

The \texttt{Thesis.tex} file contains the structure of the thesis. There are plenty of written comments that explain what pages, sections and formatting the \LaTeX{} code is creating. Initially there seems to be a lot of \LaTeX{} code, but this is all formatting, and it has all been taken care of so you don't have to do it.

Begin by checking that your information on the title page is correct. For the thesis declaration, your institution may insist on something different than the text given. If this is the case, just replace what you see with what is required.

Then comes a page which contains a funny quote. You can put your own, or quote your favourite scientist, author, person, etc\ldots Make sure to put the name of the person who you took the quote from.

Next comes the acknowledgements. On this page, write about all the people who you wish to thank (not forgetting parents, partners and your advisor/supervisor).

The contents pages, list of figures and tables are all taken care of for you and do not need to be manually created or edited. The next set of pages are optional and can be deleted since they are for a more technical thesis: insert a list of abbreviations you have used in the thesis, then a list of the physical constants and numbers you refer to and finally, a list of mathematical symbols used in any formulae. Making the effort to fill these tables means the reader has a one-stop place to refer to instead of searching the internet and references to try and find out what you meant by certain abbreviations or symbols.

The list of symbols is split into the Roman and Greek alphabets. Whereas the abbreviations and symbols ought to be listed in alphabetical order (and this is \emph{not} done automatically for you) the list of physical constants should be grouped into similar themes.

The next page contains a one line dedication. Who will you dedicate your thesis to?

Finally, there is the section where the chapters are included. Uncomment the lines (delete the `\texttt{\%}' character) as you write the chapters. Each chapter should be written in its own file and put into the `Chapters' folder and named `\texttt{Chapter1}', `\texttt{Chapter2}, etc\ldots Similarly for the appendices, uncomment the lines as you need them. Each appendix should go into its own file and placed in the `Appendices' folder.

After the preamble, chapters and appendices finally comes the bibliography. The bibliography style (called `\texttt{unsrtnat}') is used for the bibliography and is a fully featured style that will even include links to where the referenced paper can be found online. Do not under estimate how grateful you reader will be to find that a reference to a paper is just a click away. Of course, this relies on you putting the URL information into the BibTeX file in the first place.

%----------------------------------------------------------------------------------------

\section{Thesis Features and Conventions}\label{ThesisConventions}

To get the best out of this template, there are a few conventions that you may want to follow.

One of the most important (and most difficult) things to keep track of in such a long document as a thesis is consistency. Using certain conventions and ways of doing things (such as using a Todo list) makes the job easier. Of course, all of these are optional and you can adopt your own method.

\subsection{Printing Format}

This thesis template is designed for single sided printing as most theses are printed and bound this way. This means that the left margin is always wider than the right (for binding). Four out of five people will now judge the margins by eye and think, ``I never 
noticed that before.''.

The headers for the pages contain the page number on the right side (so it is easy to flick through to the page you want) and the chapter name on the left side.

The text is set to 11 point and a line spacing of 1.3. Generally, it is much more readable to have a smaller text size and wider gap between the lines than it is to have a larger text size and smaller gap. Again, you can tune the text size and spacing should you want or need to. The text size can be set in the options for the `$\backslash$\texttt{documentclass}' command at the top of the `\texttt{Thesis.tex}' file and the spacing can be changed by setting a different value in the `$\backslash$\texttt{setstretch}' commands (scattered throughout the `\texttt{Thesis.tex}' file).

\subsection{Using US Letter Paper}

The paper size used in the template is A4, which is a common -- if not standard -- size in Europe. If you are using this thesis template elsewhere and particularly in the United States, then you may have to change the A4 paper size to the US Letter size. Unfortunately, this is not as simple as replacing instances of `\texttt{a4paper}' with `\texttt{letterpaper}'.

This is because the final PDF file is created directly from the \LaTeX{} source using a program called `\texttt{pdfTeX}' and in certain conditions, paper size commands are ignored and all documents are created with the paper size set to the size stated in the configuration file for pdfTeX (called `\texttt{pdftex.cfg}').

What needs to be done is to change the paper size in the configuration file for \texttt{pdfTeX} to reflect the letter size. There is an excellent tutorial on how to do this here: \\
\href{http://www.physics.wm.edu/~norman/latexhints/pdf_papersize.html}{\texttt{http://www.physics.wm.edu/$\sim$norman/latexhints/pdf\_papersize.html}}

It may be sufficient just to replace the dimensions of the A4 paper size with the US Letter size in the \texttt{pdftex.cfg} file. Due to the differences in the paper size, the resulting margins may be different to what you like or require (as it is common for Institutions to dictate certain margin sizes). If this is the case, then the margin sizes can be tweaked by opening up the \texttt{Thesis.cls} file and searching for the line beginning with, `$\backslash$\texttt{setmarginsrb}' (not very far down from the top), there you will see the margins specified. Simply change those values to what you need (or what looks good) and save. Now your document should be set up for US Letter paper size with suitable margins.

\subsection{References}

The `\texttt{natbib}' package is used to format the bibliography and inserts references such as this one \citep{Reference3}. The options used in the `\texttt{Thesis.tex}' file mean that the references are listed in numerical order as they appear in the text. Multiple references are rearranged in numerical order (e.g. \citep{Reference2, Reference1}) and multiple, sequential references become reformatted to a reference range (e.g. \citep{Reference2, Reference1, Reference3}). This is done automatically for you. To see how you use references, have a look at the `\texttt{Chapter1.tex}' source file. Many reference managers allow you to simply drag the reference into the document as you type.

Scientific references should come \emph{before} the punctuation mark if there is one (such as a comma or period). The same goes for footnotes\footnote{Such as this footnote, here down at the bottom of the page.}. You can change this but the most important thing is to keep the convention consistent throughout the thesis. Footnotes themselves should be full, descriptive sentences (beginning with a capital letter and ending with a full stop).

To see how \LaTeX{} typesets the bibliography, have a look at the very end of this document (or just click on the reference number links).

\subsection{Figures}

There will hopefully be many figures in your thesis (that should be placed in the `Figures' folder). The way to insert figures into your thesis is to use a code template like this:
\begin{verbatim}
\begin{figure}[htbp]
  \centering
    \includegraphics{Figures/Electron.pdf}
    \rule{35em}{0.5pt}
  \caption[An Electron]{An electron (artist's impression).}
  \label{fig:Electron}
\end{figure}
\end{verbatim}
Also look in the source file. Putting this code into the source file produces the picture of the electron that you can see in the figure below.

\begin{figure}[htbp]
	\centering
		\includegraphics{Figures/Electron.pdf}
		\rule{35em}{0.5pt}
	\caption[An Electron]{An electron (artist's impression).}
	\label{fig:Electron}
\end{figure}

Sometimes figures don't always appear where you write them in the source. The placement depends on how much space there is on the page for the figure. Sometimes there is not enough room to fit a figure directly where it should go (in relation to the text) and so \LaTeX{} puts it at the top of the next page. Positioning figures is the job of \LaTeX{} and so you should only worry about making them look good!

Figures usually should have labels just in case you need to refer to them (such as in Figure \ref{fig:Electron}). The `$\backslash$\texttt{caption}' command contains two parts, the first part, inside the square brackets is the title that will appear in the `List of Figures', and so should be short. The second part in the curly brackets should contain the longer and more descriptive caption text.

The `$\backslash$\texttt{rule}' command is optional and simply puts an aesthetic horizontal line below the image. If you do this for one image, do it for all of them.

The \LaTeX{} Thesis Template is able to use figures that are either in the PDF or JPEG file format.

\subsection{Typesetting mathematics}

If your thesis is going to contain heavy mathematical content, be sure that \LaTeX{} will make it look beautiful, even though it won't be able to solve the equations for you.

The ``Not So Short Introduction to \LaTeX{}'' (available \href{http://www.ctan.org/tex-archive/info/lshort/english/lshort.pdf}{here}) should tell you everything you need to know for most cases of typesetting mathematics. If you need more information, a much more thorough mathematical guide is available from the AMS called, ``A Short Math Guide to \LaTeX{}'' and can be downloaded from:\\
\href{ftp://ftp.ams.org/pub/tex/doc/amsmath/short-math-guide.pdf}{\texttt{ftp://ftp.ams.org/pub/tex/doc/amsmath/short-math-guide.pdf}}

There are many different \LaTeX{} symbols to remember, luckily you can find the most common symbols \href{http://www.sunilpatel.co.uk/latexsymbols.html}{here}. You can use the web page as a quick reference or crib sheet and because the symbols are grouped and rendered as high quality images (each with a downloadable PDF), finding the symbol you need is quick and easy.

You can write an equation, which is automatically given an equation number by \LaTeX{} like this:
\begin{verbatim}
\begin{equation}
E = mc^{2}
  \label{eqn:Einstein}
\end{equation}
\end{verbatim}

This will produce Einstein's famous energy-matter equivalence equation:
\begin{equation}
E = mc^{2}
\label{eqn:Einstein}
\end{equation}

All equations you write (which are not in the middle of paragraph text) are automatically given equation numbers by \LaTeX{}. If you don't want a particular equation numbered, just put the command, `$\backslash$\texttt{nonumber}' immediately after the equation.

%----------------------------------------------------------------------------------------

\section{Sectioning and Subsectioning}

You should break your thesis up into nice, bite-sized sections and subsections. \LaTeX{} automatically builds a table of Contents by looking at all the `$\backslash$\texttt{chapter}$\{\}$', `$\backslash$\texttt{section}$\{\}$' and `$\backslash$\texttt{subsection}$\{\}$' commands you write in the source.

The table of Contents should only list the sections to three (3) levels. A `$\backslash$\texttt{chapter}$\{\}$' is level one (1). A `$\backslash$\texttt{section}$\{\}$' is level two (2) and so a `$\backslash$\texttt{subsection}$\{\}$' is level three (3). In your thesis it is likely that you will even use a `$\backslash$\texttt{subsubsection}$\{\}$', which is level four (4). Adding all these will create an unnecessarily cluttered table of Contents and so you should use the `$\backslash$\texttt{subsubsection$^{*}\{\}$}' command instead (note the asterisk). The asterisk ($^{*}$) tells \LaTeX{} to omit listing the subsubsection in the Contents, keeping it clean and tidy.

%----------------------------------------------------------------------------------------

\section{In Closing}

You have reached the end of this mini-guide. You can now rename or overwrite this pdf file and begin writing your own `\texttt{Chapter1.tex}' and the rest of your thesis. The easy work of setting up the structure and framework has been taken care of for you. It's now your job to fill it out!

Good luck and have lots of fun!

\begin{flushright}
Guide written by ---\\
Sunil Patel: \href{http://www.sunilpatel.co.uk}{www.sunilpatel.co.uk}
\end{flushright}
\end{comment}